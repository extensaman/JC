Найти и пересказать:
-------------------------------------------------------------------------------------------------
1 Какими двумя способами можно создать потоки ?

1.1. Создать класс-наследник класса Thread
1.2. Создать класс, имплементирующий интерфейс Runnable
-------------------------------------------------------------------------------------------------
2 Как запустить поток?

С помощью метода start()
-------------------------------------------------------------------------------------------------
3 На что влияет приоритет в потоке?

Поток с большим приоритетом будет иметь больше процессорного времени на выполнение. 
Если два потока имеют одинаковый приоритет, то решение о том, 
какой из них будет выполняться первым, зависит от алгоритма планировщика
-------------------------------------------------------------------------------------------------
4 На что влияет Daemon в потоке?

Поток не завершится, пока не завершатся все запущенные им не-демон-потоки.
Демон-потоки - это потоки, срок жизни которых зависит исключительно от работы самой JVM, т.е.
отключение JVM приводит и к отключению всех потоков-демонов.

Когда создается новый поток, он наследует статус демона своего родителя.
Когда все потоки, не являющиеся демонами, заканчивают работу, JVM останавливается, 
а все оставшиеся потоки демонов удаляются:
- finally блоки не выполняются,
- стеки не разматываются - JVM просто выходит.
-------------------------------------------------------------------------------------------------
5 Как прервать работу потока?

Мметод interrupt() предлагает потоку остановить свое выполнение путем установки флага interrupted 
в true внутри потока. Этот флаг отображает статус прерывания и имеет начальное значение false. 
Когда поток прерывается другим потоком, происходит одно из двух:
5.1. Если поток ожидает выполнения прерываемого метода блокирования, 
таких как Thread.sleep(), Thread.join() или Object.wait(), 
то ожидание прерывается и метод генерирует InterruptedException. Флаг interrupted устанавливается в false.
5.2. Флаг interrupted устанавливается в true.
-------------------------------------------------------------------------------------------------
6 Что такое монитор у объекта?

Монитор — это механизм обеспечения синхронизации доступа нескольких потоков к данному объекту.
Механизм «монитор» внутри себя содержит 4 поля: 

6.1 locked типа boolean, которое показывает, захвачен монитор или нет; 
6.2. owner типа Thread — в это поле записывается поток, который захватил данный монитор;
6.3. blocked set — в это множество попадают потоки, которые не смогли захватить блокировку, 
или поток, который выходит из состояния wait;
6.4. wait set — в это множество попадают потоки, для которых был вызван метод wait.
------------------------------------------------------------------------------------------------
7 Что означает synchronized перед не статическим методом?

Это означает, что при вызове данного метода JVM проверяется статус "монитора", ассоциированный с 
объектом класса, содержащего данный метод. 
В случае, если монитор не заблокирован другим потоком, данный монитор блокируется, в поле 
owner монитора заносятся сведения о дааном потоке и происходит исполение кода synchronized-метода.
После исполнения кода метода блокировка с монитора снимается.
В случае, если моритор оказался заблокирован, поток попадает в blocked-set данного монитора для 
ожидания освобождения монитора.
------------------------------------------------------------------------------------------------
8 Что означает synchronized перед статическим методом?

Здесь ситуация аналогична за исключением того, что монитор ассоциируется с объектом класса Class 
данного класса (например, MyClass.class)
------------------------------------------------------------------------------------------------
9 Что вернет Thread.currentThread();

Ссылку на текущий объект-поток.
------------------------------------------------------------------------------------------------
10 Что делает метод join в потоке?

Метод join заставляет поток, в котром был он вызван, приостановиться до завершеня исполнения
потока, на котором он был вызван.
Т.е. является методом с java кодом, 
который выполняет wait, пока поток, на котором он вызван, живёт. 
Как только поток умирает (при завершении), ожидание прерывается.
------------------------------------------------------------------------------------------------
11 Что такое взаимная блокировка(Deadlock)?

Когда два и более потоков вечно ожидают друг друга, т.е. находятся в wait set мониторов.
------------------------------------------------------------------------------------------------
12 Что означает модификатор доступа volatile?

Ключевое слово volatile указывает, что взаимодействие с переменной в памяти 
должно происходить минуя кэши процессора, т. е.  напрямую.
В многопоточном приложении, когда потоки используют не volatile переменные, 
они могут скопировать значение переменных в кэш процессора для улучшения производительности. 
Если в процессоре несколько ядер и каждый поток выполняется на отдельном ядре процессора, 
одна и та же переменная может иметь разное значение на каждом ядре процессора. 
В результате будет несколько копии одной и той же переменной: копии в кэше каждого ядра процессора 
и копия переменной в основной памяти. 
При использовании не volatile переменных нельзя знать наверняка, 
когда JVM читает значение переменной из главной памяти 
и когда записывается значение переменной в главную память. Это может привести к проблемам.
------------------------------------------------------------------------------------------------
13 Для чего используются у монитора wait(), notify() и notifyAll()?

13.1. wait(): освобождает монитор и переводит вызывающий поток в состояние ожидания до тех пор, 
пока другой поток не вызовет метод notify()

13.2. notify(): продолжает работу потока, у которого ранее был вызван метод wait()

13.3. notifyAll(): возобновляет работу всех потоков, у которых ранее был вызван метод wait()

Все эти методы вызываются только из синхронизированного контекста - 
синхронизированного блока или метода.
------------------------------------------------------------------------------------------------