Найти и пересказать:
-------------------------------------------------------------------------------------------------
1 Что такое исключение ?

Это незапланированная, нештатная ситуация, которая произвошла при работе программы.
-------------------------------------------------------------------------------------------------
2 Иерархия исключений?

0)Object 
1)Throwable
1.1) Error
1.2) Exception
-------------------------------------------------------------------------------------------------
3 Класс Error для чего нужен и его реализации (например OutOfMemoryError, StackOverflowError )?

Класс, который предназначен для описания исключений (ошибок) возникающих в самой среде Java. 
Такие исключения не оговариваются во время нормального выполнения прикладной программы. 
-------------------------------------------------------------------------------------------------
4 Класс Exception для чего нужен и его реализации (например IOException, ClassNotFoundException)?

Предназначен для задания исключительных условий, которые перехватываются программой. 
Если нужно объявить собственный класс (тип) исключений, то этот класс может быть унаследован от 
данного класса
-------------------------------------------------------------------------------------------------
5 Класс RuntimeException для чего нужен и его реализации (например NullPointerException , 
ArrayIndexOutOfBoundsException, ClassCastException)?

Данный класс содержит непроверяемые исключения. Компилятор не проверяет, может ли генерировать и/или 
обрабатывать метод эти исключения. Исключения типа RuntimeException генерируются
при возникновении ошибок во время выполнения приложения. Непроверяемые исключения чаще всего 
являются следствием ошибок программиста.
-------------------------------------------------------------------------------------------------
6 Что означает Unchecked и checked exception?

Проверяемые исключения - исключения, которые компилятор обязывает программиста отлавливать
(или через защищенную секцию try-catch, или через спецификацию исключения (throws в сигнатуре метода))
Непроверяемые исключения - исключения, которые компилятор не обязывает программиста отлавливать
-------------------------------------------------------------------------------------------------
7 Какие исключения относятся к unchecked exception?

Наследники класса Error и класса RuntimeException
-------------------------------------------------------------------------------------------------
8 Какие исключения относятся к checked exception?

Не указанные в п.7.
-------------------------------------------------------------------------------------------------
9 Что означают ключевые слова Throw, throws?

throw - команда генерации исключительной ситуации
throws - ключевое слово, используемое для указания спецификации исключения в сигнатуре метода.
-------------------------------------------------------------------------------------------------
10 Как использовать конструкцию try – catch - finally?

try – catch  - защищенная секция, в котрой может произойти исключительная ситуация, после возниконовения 
котрой управление передается в блок catch.
Блок finally исполняется при любых обстоятельствах, в независимости от того возникло исключение или нет.
-------------------------------------------------------------------------------------------------
11 Какие классы для работы с файлами вы знаете?

File, FileInputStream, FileOutputStream, FileReader, FileWriter, BufferedInputStream, BufferedOutputStream,
BufferedReader, BufferedWriter, DataInputStream, DataOutputStream
-------------------------------------------------------------------------------------------------
12 Зачем нужно закрывать поток для работы с файлами?

При закрытии потока освобождаются все выделенные для него ресурсы, в том числе и сам файл. 
В случае, если поток окажется не закрыт, может происходить утечка памяти.
-------------------------------------------------------------------------------------------------
13 Что можно сделать с файлами черех класс File?

13.1. Проверить аттрибуты разрешения на чтение/запись - canRead/canWrite
13.2. Создать новый файл - createNewFile()
13.3. Удалить файл - delete();
13.4. Удалить файл при завершении работы JVM - deleteOnExit()
13.5. Получить путь к файлу в виде строки - getAbsolutePath()
13.6. Проверить является ли данный объект директорией isDirectory()
13.7. Проверить является ли данный объект файлом isFile()
13.8. Возвращает перечень папок и файлов, хранящихся в каталоге list()
13.9. Создание каталога mkdirs()
13.10. Переименование файла reпameTo(File dest)
13.11. Устанавить для файла атрибут только для чтения setReadOпly()
-------------------------------------------------------------------------------------------------